{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/page/SettingsPage.ts","src/page/SettingsPageRoutes.ts","src/page/index.ts","src/service/SettingsConfig.ts","src/service/SettingsPageSelectedTab.ts","src/service/SettingsService.ts","src/service/SettingsStateConfig.ts","src/service/SettingsTab.ts","src/service/index.ts","temp/pip-webui-settings-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","settings","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","angular","SettingsPageSelectedTab_1","SettingsPageController","$state","$rootScope","$scope","$injector","$timeout","$location","pipNavService","pipSettings","pipMedia","_this","translateInit","mediaSizeGtSm","initTabs","details","search","cleanUpSelectFunc","$on","state","current","name","initSelect","cleanUpFunc","appHeader","isFunction","$inject","prototype","tabs","_","filter","getTabs","tab","visible","access","sortBy","selected","SettingsPageSelectedTab","getDefaultTab","_pipTranslate","has","get","setTranslations","PIP_SETTINGS","PIP_SETTINGS_DETAILS","toMainFromDetails","breadcrumb","breakpoint","icon","showMenu","text","detailsTitle","title","showBack","items","click","subActions","actions","hide","appbar","removeShadow","updateState","find","tabIndex","indexOf","tabId","go","onNavigationSelect","../service/SettingsPageSelectedTab","3","configureSettingsPageRoutes","$stateProvider","url","auth","controllerAs","controller","templateUrl","defineProperty","value","SettingsConfig","titleText","titleLogo","isNavIcon","Object","SettingsConfig_1","SettingsService","config","_config","getFullStateName","setDefaultTab","defaultTab","cloneDeep","showTitleText","newTitleText","showTitleLogo","newTitleLogo","showNavIcon","undefined","SettingsProvider","_stateProvider","stateProvider","enumerable","configurable","addTab","tabObj","validateTab","push","iconClass","index","stateConfig","isObject","$get","isNull","_service","isUndefined","provider","9","SettingsStateConfig","10","SettingsTab","__export","m","p","hasOwnProperty","./SettingsConfig","./SettingsPageSelectedTab","./SettingsService","./SettingsStateConfig","./SettingsTab","12","run","$templateCache","put"],"mappings":"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","file":"pip-webui-settings.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import './service';\r\nimport './page';\r\n\r\nangular.module('pipSettings', [\r\n    'pipSettings.Service',\r\n    'pipSettings.Page'\r\n]);\r\n\r\nexport * from './service';","import { ISettingsService } from '../service/ISettingsService';\r\nimport { SettingsTab } from '../service/SettingsTab';\r\nimport { SettingsPageSelectedTab } from '../service/SettingsPageSelectedTab';\r\n\r\ninterface ISettingsPageController {\r\n    tabs: SettingsTab[];\r\n    selected: SettingsPageSelectedTab;\r\n    // onDropdownSelect: Function;\r\n    onNavigationSelect(state: string): void;\r\n}\r\n\r\nclass SettingsPageController implements ISettingsPageController {\r\n    private _pipTranslate: pip.services.ITranslateService\r\n\r\n    public tabs: SettingsTab[];\r\n    public selected: SettingsPageSelectedTab;\r\n    // public onDropdownSelect: Function;\r\n    private cleanUpFunc: Function;\r\n    private cleanUpSelectFunc: Function;\r\n    private mediaSizeGtSm: boolean;\r\n    public details: boolean;\r\n\r\n    constructor(\r\n        private $state: ng.ui.IStateService,\r\n        private $rootScope: ng.IRootScopeService,\r\n        $scope: ng.IScope,\r\n        private $injector: ng.auto.IInjectorService,\r\n        private $timeout: angular.ITimeoutService,\r\n        private $location: ng.ILocationService,\r\n        private pipNavService: pip.nav.INavService,\r\n        private pipSettings: ISettingsService,\r\n        public pipMedia: pip.layouts.IMediaService,\r\n    ) {\r\n\r\n        this.translateInit();\r\n\r\n        this.mediaSizeGtSm = this.pipMedia('gt-sm');\r\n\r\n        this.initTabs();\r\n\r\n        if (!this.pipMedia('gt-sm')) {\r\n            this.details = $location.search().details == 'details' ? true : false;\r\n        } else {\r\n            this.details = false;\r\n            this.$location.search('details', 'main');\r\n        }\r\n            \r\n        this.cleanUpSelectFunc = $rootScope.$on('$stateChangeSuccess', () => {\r\n            let state = this.$state.current.name;\r\n            this.initSelect(state, false);\r\n        });\r\n\r\n        this.cleanUpFunc = $rootScope.$on('pipMainResized', () => {\r\n            if (this.mediaSizeGtSm !== this.pipMedia('gt-sm')) {\r\n                this.mediaSizeGtSm = this.pipMedia('gt-sm');\r\n\r\n                if (this.pipMedia('gt-sm')) {\r\n                    this.details = false;\r\n                }\r\n                this.appHeader();\r\n            }\r\n        });\r\n        this.appHeader();\r\n\r\n        $scope.$on('$destroy', () => {\r\n            if (angular.isFunction(this.cleanUpFunc)) {\r\n                this.cleanUpFunc();\r\n            }\r\n            \r\n            if (angular.isFunction(this.cleanUpSelectFunc)) {\r\n                this.cleanUpSelectFunc();\r\n            }\r\n        });\r\n    }\r\n\r\n    private initTabs(): void {\r\n        this.tabs = _.filter(this.pipSettings.getTabs(), (tab: SettingsTab) => {\r\n            if (tab.visible === true && (tab.access ? tab.access(this.$rootScope['$user'], tab) : true)) {\r\n                return tab;\r\n            }\r\n        });\r\n\r\n        this.tabs = _.sortBy(this.tabs, 'index');\r\n\r\n        this.selected = new SettingsPageSelectedTab();\r\n        if (this.$state.current.name !== 'settings') {\r\n            this.initSelect(this.$state.current.name);\r\n        } else if (this.$state.current.name === 'settings' && this.pipSettings.getDefaultTab()) {\r\n            this.initSelect(this.pipSettings.getDefaultTab().state);\r\n        } else {\r\n            this.$timeout(() => {\r\n                if (this.pipSettings.getDefaultTab()) {\r\n                    this.initSelect(this.pipSettings.getDefaultTab().state);\r\n                }\r\n                if (!this.pipSettings.getDefaultTab() && this.tabs.length > 0) {\r\n                    this.initSelect(this.tabs[0].state);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private translateInit() {\r\n        this._pipTranslate = this.$injector.has('pipTranslate') ? <pip.services.ITranslateService>this.$injector.get('pipTranslate') : null;\r\n        if (this._pipTranslate && this._pipTranslate.setTranslations) {\r\n            this._pipTranslate.setTranslations('en', {\r\n                PIP_SETTINGS: 'Settings',\r\n                PIP_SETTINGS_DETAILS: 'Settings details'\r\n            });\r\n            this._pipTranslate.setTranslations('ru', {\r\n                PIP_SETTINGS: 'Настройки',\r\n                PIP_SETTINGS_DETAILS: 'Подробно'\r\n            });\r\n        }\r\n    }\r\n    private toMainFromDetails(): void {\r\n        this.$location.search('details', 'main');\r\n        this.details = false;\r\n        this.appHeader();\r\n    }\r\n\r\n    public appHeader(): void {\r\n        this.pipNavService.breadcrumb.breakpoint = 'gt-sm';\r\n        if (!this.pipMedia('gt-sm')) {\r\n            let detailsTitle: string = this.selected && this.selected.tab ? this.selected.tab.title : 'PIP_SETTINGS_DETAILS';\r\n            if (this.details) {\r\n                this.pipNavService.icon.showBack(() => {\r\n                    this.toMainFromDetails();\r\n                });\r\n                this.pipNavService.breadcrumb.items = [\r\n                    <pip.nav.BreadcrumbItem>{\r\n                        title: \"PIP_SETTINGS\", click: () => {\r\n                            this.toMainFromDetails();\r\n                        }\r\n                    },\r\n                    <pip.nav.BreadcrumbItem>{\r\n                        title: detailsTitle, click: () => { }, subActions: []\r\n                    }\r\n                ];\r\n            } else {\r\n                this.pipNavService.icon.showMenu();\r\n                this.pipNavService.breadcrumb.text = \"PIP_SETTINGS\";\r\n            }\r\n        } else {\r\n            this.pipNavService.icon.showMenu();\r\n            this.pipNavService.breadcrumb.text = \"PIP_SETTINGS\";\r\n        }\r\n\r\n\r\n        this.pipNavService.actions.hide();\r\n        this.pipNavService.appbar.removeShadow();\r\n    }\r\n\r\n    private initSelect(state: string, updateState: boolean = true): void {\r\n        this.selected.tab = _.find(this.tabs, (tab: SettingsTab) => {\r\n            return tab.state === state;\r\n        });\r\n        this.selected.tabIndex = _.indexOf(this.tabs, this.selected.tab);\r\n        this.selected.tabId = state;\r\n        if (updateState === true) this.$state.go(this.selected.tabId);\r\n    }\r\n\r\n    public onNavigationSelect(state: string): void {\r\n        this.initSelect(state);\r\n\r\n        if (!this.pipMedia('gt-sm')) {\r\n            this.details = true;\r\n            this.$location.search('details', 'details');\r\n            this.appHeader();\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipSettings.Page')\r\n    .controller('pipSettingsPageController', SettingsPageController);\r\n","{\r\n    function configureSettingsPageRoutes($stateProvider) {\r\n        $stateProvider\r\n            .state('settings', {\r\n                url: '/settings?user_id&details',\r\n                auth: true,\r\n                controllerAs: 'vm',\r\n                controller: 'pipSettingsPageController',\r\n                templateUrl: 'page/SettingsPage.html'\r\n            });\r\n\r\n    }\r\n\r\n    angular.module('pipSettings.Page')\r\n        .config(configureSettingsPageRoutes);\r\n}\r\n","angular.module('pipSettings.Page', [\r\n    'ui.router', \r\n    'pipSettings.Service',\r\n    'pipNav', \r\n    'pipSelected',\r\n    'pipTranslate',\r\n    'pipSettings.Templates'\r\n    ]);\r\n\r\n\r\nimport './SettingsPage';\r\nimport './SettingsPageRoutes';","import { SettingsTab } from './SettingsTab';\r\n\r\nexport class SettingsConfig {\r\n    public defaultTab: string;\r\n    public tabs: SettingsTab[] = [];\r\n    public titleText: string = 'SETTINGS_TITLE';\r\n    public titleLogo: boolean = null;\r\n    public isNavIcon: boolean = true;\r\n}\r\n","import { SettingsTab } from './SettingsTab';\r\n\r\nexport class SettingsPageSelectedTab {\r\n    public tab: SettingsTab;\r\n    public tabIndex: number = 0;\r\n    public tabId: string;\r\n}","import { SettingsTab } from './SettingsTab';\r\nimport { SettingsConfig } from './SettingsConfig';\r\nimport { ISettingsService } from './ISettingsService';\r\nimport { ISettingsProvider } from './ISettingsService';\r\n\r\nclass SettingsService implements ISettingsService {\r\n    private _config: SettingsConfig;\r\n\r\n    public constructor(config: SettingsConfig) {\r\n        \"ngInject\";\r\n        this._config = config;\r\n    }\r\n\r\n    private getFullStateName(state: string): string {\r\n        return 'settings.' + state;\r\n    }\r\n\r\n    public setDefaultTab(name: string): void {\r\n        if (!_.find(this._config.tabs, (tab: SettingsTab) => {\r\n            return tab.state === 'settings.' + name;\r\n        })) {\r\n            throw new Error('Tab with state name \"' + name + '\" is not registered');\r\n        }\r\n\r\n        this._config.defaultTab = this.getFullStateName(name);\r\n    }\r\n\r\n    public getDefaultTab(): SettingsTab {\r\n        let defaultTab: SettingsTab;\r\n\r\n        defaultTab = _.find(this._config.tabs, (tab: SettingsTab) => {\r\n            return tab.state === this._config.defaultTab;\r\n        });\r\n        return _.cloneDeep(defaultTab);\r\n    }\r\n\r\n    public showTitleText(newTitleText: string): string {\r\n        if (newTitleText) {\r\n            this._config.titleText = newTitleText;\r\n            this._config.titleLogo = null;\r\n        }\r\n\r\n        return this._config.titleText;\r\n    }\r\n\r\n    public showTitleLogo(newTitleLogo) {\r\n        if (newTitleLogo) {\r\n            this._config.titleLogo = newTitleLogo;\r\n            this._config.titleText = null;\r\n        }\r\n\r\n        return this._config.titleLogo;\r\n    }\r\n\r\n    public showNavIcon(value: boolean): boolean {\r\n        if (value !== null && value !== undefined) {\r\n            this._config.isNavIcon = !!value;\r\n        }\r\n\r\n        return this._config.isNavIcon;\r\n    }\r\n\r\n    public getTabs(): SettingsTab[] {\r\n        return _.cloneDeep(this._config.tabs);\r\n    }\r\n\r\n}\r\n\r\nclass SettingsProvider implements ISettingsProvider {\r\n    private _service: SettingsService;\r\n    private _stateProvider: { state: Function };\r\n    private _config: SettingsConfig = new SettingsConfig();\r\n\r\n    constructor($stateProvider: ng.ui.IStateProvider) { \"ngInject\"; this._stateProvider = $stateProvider; }\r\n\r\n    public set stateProvider(stateProvider: { state: Function }) {\r\n        this._stateProvider = stateProvider;\r\n    }\r\n\r\n    public get stateProvider(): { state: Function } {\r\n        return this._stateProvider;\r\n    }\r\n\r\n    public getFullStateName(state: string): string {\r\n        return 'settings.' + state;\r\n    }\r\n\r\n    public getDefaultTab(): SettingsTab {\r\n        let defaultTab: SettingsTab;\r\n\r\n        defaultTab = _.find(this._config.tabs, (tab: SettingsTab) => {\r\n            return tab.state === defaultTab.state;\r\n        });\r\n\r\n        return _.cloneDeep(defaultTab);\r\n    }\r\n\r\n    public addTab(tabObj: SettingsTab): void {\r\n        let existingTab: SettingsTab;\r\n\r\n        this.validateTab(tabObj);\r\n        existingTab = _.find(this._config.tabs, (tab: SettingsTab) => {\r\n            return tab.state === 'settings.' + tabObj.state;\r\n        });\r\n        if (existingTab) {\r\n            throw new Error('Tab with state name \"' + tabObj.state + '\" is already registered');\r\n        }\r\n\r\n        this._config.tabs.push({\r\n            state: this.getFullStateName(tabObj.state),\r\n            title: tabObj.title,\r\n            icon: tabObj.icon,\r\n            iconClass: tabObj.iconClass,\r\n            index: tabObj.index || 100000,\r\n            access: tabObj.access,\r\n            visible: tabObj.visible !== false,\r\n            stateConfig: _.cloneDeep(tabObj.stateConfig)\r\n        });\r\n        this._stateProvider.state(this.getFullStateName(tabObj.state), tabObj.stateConfig);\r\n\r\n        // if we just added first state and no default state is specified\r\n        if (typeof this._config.defaultTab === 'undefined' && this._config.tabs.length === 1) {\r\n            this.setDefaultTab(tabObj.state);\r\n        }\r\n    }\r\n\r\n    public setDefaultTab(name: string): void {\r\n        // TODO [apidhirnyi] extract expression inside 'if' into variable. It isn't readable now.\r\n        if (!_.find(this._config.tabs, (tab: SettingsTab) => {\r\n            return tab.state === 'settings.' + name;\r\n        })) {\r\n            throw new Error('Tab with state name \"' + name + '\" is not registered');\r\n        }\r\n\r\n        this._config.defaultTab = this.getFullStateName(name);\r\n        //console.log(this.$stateProvider);\r\n        //this.$stateProvider.go(this._config.defaultTab);\r\n        //pipAuthStateProvider.redirect('settings', getFullStateName(name));\r\n    }\r\n\r\n    /**\r\n     * Validates passed tab config object\r\n     * If passed tab is not valid it will throw an error\r\n     */\r\n    private validateTab(tabObj: SettingsTab): void {\r\n        if (!tabObj || !_.isObject(tabObj)) {\r\n            throw new Error('Invalid object');\r\n        }\r\n\r\n        if (tabObj.state === null || tabObj.state === '') {\r\n            throw new Error('Tab should have valid Angular UI router state name');\r\n        }\r\n\r\n        if (tabObj.access && !_.isFunction(tabObj.access)) {\r\n            throw new Error('\"access\" should be a function');\r\n        }\r\n\r\n        if (!tabObj.stateConfig || !_.isObject(tabObj.stateConfig)) {\r\n            throw new Error('Invalid state configuration object');\r\n        }\r\n    }\r\n\r\n    public showTitleText(newTitleText: string): string {\r\n        if (newTitleText) {\r\n            this._config.titleText = newTitleText;\r\n            this._config.titleLogo = null;\r\n        }\r\n\r\n        return this._config.titleText;\r\n    }\r\n\r\n    public showTitleLogo(newTitleLogo) {\r\n        if (newTitleLogo) {\r\n            this._config.titleLogo = newTitleLogo;\r\n            this._config.titleText = null;\r\n        }\r\n\r\n        return this._config.titleLogo;\r\n    }\r\n\r\n    public showNavIcon(value: boolean): boolean {\r\n        if (value !== null && value !== undefined) {\r\n            this._config.isNavIcon = !!value;\r\n        }\r\n\r\n        return this._config.isNavIcon;\r\n    }\r\n\r\n    public $get(): ISettingsService {\r\n        \"ngInject\";\r\n\r\n        if (_.isNull(this._service) || _.isUndefined(this._service)) {\r\n            this._service = new SettingsService(this._config);\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipSettings.Service', ['ui.router'])\r\n    .provider('pipSettings', SettingsProvider);\r\n\r\n","export class SettingsStateConfig {\r\n    public url: string;\r\n    public auth: boolean = false;\r\n    public templateUrl?: string;\r\n    public template?: string;\r\n}","import { SettingsStateConfig } from './SettingsStateConfig';\r\n\r\nexport class SettingsTab {\r\n    public state: string;\r\n    public title: string;\r\n    public icon?: string;\r\n    public iconClass?: string;\r\n    public index: number;\r\n    public access: Function;\r\n    public visible: boolean;\r\n    public stateConfig: SettingsStateConfig;\r\n}\r\n","import './SettingsConfig';\r\nimport './SettingsPageSelectedTab';\r\nimport './SettingsStateConfig';\r\nimport './SettingsTab';\r\nimport './SettingsService';\r\n\r\nexport * from './SettingsConfig';\r\nexport * from './SettingsPageSelectedTab';\r\nexport * from './SettingsStateConfig';\r\nexport * from './SettingsTab';\r\nexport * from './SettingsService';\r\n","(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('page/SettingsPage.html',\n    '<div class=\"pip-main-menu pip-settings\" ng-class=\"{\\'pip-single-content\\': vm.details}\"><div class=\"pip-menu\"><div class=\"pip-list-container pip-scroll divider-top\"><md-list class=\"pip-ref-list tp0 pip-settings-list\" pip-selected=\"vm.selected.tabIndex\" pip-selected-watch=\"vm.selected.navId\" pip-select=\"vm.onNavigationSelect($event.id)\"><md-list-item class=\"pip-ref-list-item pointer divider-bottom pip-selectable\" ng-repeat=\"tab in vm.tabs track by tab.state\" pip-id=\"{{:: tab.state }}\" md-ink-ripple=\"\"><div ng-click=\"vm.onNavigationSelect(tab.state)\" class=\"layout-row layout-align-start-center flex\"><div class=\"pip-settings-icon layout-row layout-align-start-center {{ tab.iconClass ? tab.iconClass : \\'pip-settings-icon-color\\'}}\" ng-if=\"tab.icon\"><md-icon class=\"\" md-svg-icon=\"{{ tab.icon }}\"></md-icon></div><div class=\"pip-content {{ tab.icon ? \\'\\' : \\'pip-settings-without-icon\\' }}\"><p class=\"pip-title text-overflow flex\">{{ ::tab.title | translate }}</p></div><div class=\"pip-ref-list-item-end-icon\"><md-icon class=\"\" md-svg-icon=\"icons:chevron-right\"></md-icon></div></div></md-list-item></md-list></div></div><div class=\"pip-content-container\"><pip-document><div class=\"pip-body tp24-flex layout-column flex\" ui-view=\"\"></div></pip-document></div></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-settings-html.min.js.map\n"]}