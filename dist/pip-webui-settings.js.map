{"version":3,"sources":["pip-webui-settings-html.js","settings.js","settings_page/settings_page.js","settings_service/settings_service.js","user_settings/user_settings.js","user_settings/user_settings_basic_info.js","user_settings/user_settings_change_password.js","user_settings/user_settings_data.js","user_settings/user_settings_sessions.js","user_settings/user_settings_strings.js","user_settings/user_settings_verify_email.js"],"names":[],"mappingshbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdhrnlfile":"pip-webui-settings.js","sourcesContent":["(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('settings_page/settings_page.html',\n    '<md-toolbar class=\"pip-appbar-ext\"></md-toolbar>\\n' +\n    '<pip-document width=\"800\" min-height=\"400\"\\n' +\n    '              class=\"pip-settings\">\\n' +\n    '\\n' +\n    '    <div class=\"pip-menu-container\"\\n' +\n    '         ng-hide=\"manager === false || !tabs || tabs.length < 1\">\\n' +\n    '        <md-list class=\"pip-menu pip-simple-list hide-xs\"\\n' +\n    '                 pip-selected=\"selected.tabIndex\"\\n' +\n    '                 pip-selected-watch=\"selected.navId\"\\n' +\n    '                 pip-select=\"onNavigationSelect($event.id)\">\\n' +\n    '            <md-list-item class=\"pip-simple-list-item pip-selectable flex\"\\n' +\n    '                          ng-repeat=\"tab in tabs track by tab.state\" ng-if=\"$party.id == $user.id ||\\n' +\n    '                          tab.state == \\'settings.basic_info\\'|| tab.state ==\\'settings.contact_info\\'\\n' +\n    '                          || tab.state ==\\'settings.blacklist\\'\"\\n' +\n    '                          md-ink-ripple\\n' +\n    '                          pip-id=\"{{:: tab.state }}\">\\n' +\n    '                <p>{{::tab.title | translate}}</p>\\n' +\n    '            </md-list-item>\\n' +\n    '        </md-list>\\n' +\n    '\\n' +\n    '        <div class=\"pip-content-container\" ng-if=\"selected.tab\">\\n' +\n    '            <pip-dropdown class=\"hide-gt-xs\"\\n' +\n    '                          pip-actions=\"tabs\"\\n' +\n    '                          pip-dropdown-select=\"onDropdownSelect\"\\n' +\n    '                          pip-active-index=\"selected.tabIndex\"></pip-dropdown>\\n' +\n    '\\n' +\n    '            <div class=\"pip-body tp24-flex layout-column\" ui-view></div>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"layout-column layout-align-center-center flex\"\\n' +\n    '         ng-show=\"manager === false || !tabs || tabs.length < 1\">\\n' +\n    '        {{::\\'ERROR_400\\' | translate}}\\n' +\n    '    </div>\\n' +\n    '</pip-document>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('user_settings/user_settings_basic_info.html',\n    '<form name=\"form\" class=\"w-stretch\" novalidate>\\n' +\n    '    <md-progress-linear class=\"pip-progress-top\"\\n' +\n    '                        ng-show=\"transaction.busy()\"\\n' +\n    '                        md-mode=\"indeterminate\"></md-progress-linear>\\n' +\n    '    <div class=\"layout-row bm12\">\\n' +\n    '        <div class=\"md-tile-left\">\\n' +\n    '            <pip-avatar-edit pip-party-id=\"$party.id\"\\n' +\n    '                             pip-created=\"onPictureCreated($event)\"\\n' +\n    '                             pip-changed=\"onPictureChanged($control, $event)\">\\n' +\n    '            </pip-avatar-edit>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"md-tile-content tp0 layout-align-center\">\\n' +\n    '            <h3 class=\"tm16 bm8 text-one-line\">{{ nameCopy }}</h3>\\n' +\n    '\\n' +\n    '            <p class=\"text-primary text-overflow m0\">\\n' +\n    '                {{::\\'SETTINGS_BASIC_INFO_FROM\\' | translate}}\\n' +\n    '                {{$user.signup | formatLongDate }}\\n' +\n    '            </p>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block\">\\n' +\n    '        <label>{{::\\'SETTINGS_BASIC_INFO_FULL_NAME\\' | translate}}</label>\\n' +\n    '        <input name=\"fullName\" step=\"any\" type=\"text\" tabindex=\"0\" required\\n' +\n    '               ng-model=\"$party.name\"\\n' +\n    '               ng-disabled=\"transaction.busy()\"\\n' +\n    '               ng-change=\"onChangeBasicInfo()\"/>\\n' +\n    '\\n' +\n    '        <div class=\"hint\"\\n' +\n    '             ng-if=\"errorsWithHint(form, form.fullName).hint\">\\n' +\n    '            {{::\\'ERROR_FULLNAME_INVALID\\' | translate}}\\n' +\n    '        </div>\\n' +\n    '    </md-input-container>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block bm0\">\\n' +\n    '        <label>{{::\\'SETTINGS_BASIC_INFO_PRIMARY_EMAIL\\' | translate}}</label>\\n' +\n    '        <input name=\"email\" type=\"email\" required\\n' +\n    '               ng-model=\"$party.email\"\\n' +\n    '               ng-change=\"onChangeBasicInfo()\"\\n' +\n    '               pip-email-unique=\"{{$party.email}}\"/>\\n' +\n    '\\n' +\n    '        <div class=\"hint\"\\n' +\n    '             ng-if=\"errorsWithHint(form, form.email).hint && !$user.email_ver\">\\n' +\n    '            {{::\\'SETTINGS_BASIC_INFO_VERIFY_HINT\\' | translate}}\\n' +\n    '        </div>\\n' +\n    '        <div ng-messages=\"errorsWithHint(form.email)\" ng-hide=\" $party.type ==\\'team\\'\">\\n' +\n    '            <div ng-message=\"email\">{{::\\'ERROR_EMAIL_INVALID\\' | translate}}</div>\\n' +\n    '            <div ng-message=\"emailUnique\">{{::\\'ERROR_EMAIL_INVALID\\' | translate}}</div>\\n' +\n    '        </div>\\n' +\n    '    </md-input-container>\\n' +\n    '\\n' +\n    '    <md-button class=\"md-raised bm16 tm8 rm8\"\\n' +\n    '               ng-click=\"onVerifyEmail($event)\"\\n' +\n    '               ng-hide=\"$user.email_ver || $party.type ==\\'team\\'\">\\n' +\n    '        {{::\\'SETTINGS_BASIC_INFO_VERIFY_CODE\\' | translate}}\\n' +\n    '    </md-button>\\n' +\n    '\\n' +\n    '    <md-button ng-click=\"onChangePassword($event)\" class=\"md-raised bm16 tm8\" ng-hide=\"$party.type ==\\'team\\'\">\\n' +\n    '        {{::\\'SETTINGS_BASIC_INFO_CHANGE_PASSWORD\\' | translate}}\\n' +\n    '    </md-button>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block flex\">\\n' +\n    '        <label>{{::\\'SETTINGS_BASIC_INFO_WORDS_ABOUT_ME\\' | translate }}</label>\\n' +\n    '        <textarea ng-model=\"$party.about\" columns=\"1\"\\n' +\n    '                  ng-change=\"onChangeBasicInfo()\"></textarea>\\n' +\n    '    </md-input-container>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block\" ng-hide=\"$party.type ==\\'team\\'\">\\n' +\n    '        <label>{{::\\'GENDER\\' | translate}}</label>\\n' +\n    '        <md-select ng-model=\"$party.gender\" ng-change=\"onChangeBasicInfo()\"\\n' +\n    '                   placeholder=\"{{\\'GENDER\\' | translate}}\">\\n' +\n    '            <md-option ng-value=\"gender.id\" ng-repeat=\"gender in genders\">{{gender.name}}</md-option>\\n' +\n    '        </md-select>\\n' +\n    '    </md-input-container>\\n' +\n    '\\n' +\n    '    <div ng-hide=\"$party.type ==\\'team\\'\">\\n' +\n    '        <p class=\"text-caption text-grey tm0 bm0\">{{::\\'SETTINGS_BASIC_INFO_BIRTHDAY\\' | translate}}</p>\\n' +\n    '        <pip-date ng-model=\"$party.birthday\"\\n' +\n    '                  ng-change=\"onChangeBasicInfo()\"\\n' +\n    '                  pip-time-mode=\"past\\n' +\n    '                  time-mode=\"past\"></pip-date>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block\"\\n' +\n    '                        ng-hide=\"$party.type ==\\'team\\'\">\\n' +\n    '        <label>{{::\\'LANGUAGE\\' | translate}}</label>\\n' +\n    '        <md-select placeholder=\"{{\\'LANGUAGE\\' | translate}}\"\\n' +\n    '                   ng-model=\"$user.language\"\\n' +\n    '                   ng-change=\"onChangeUser()\">\\n' +\n    '            <md-option ng-value=\"language.id\"\\n' +\n    '                       ng-repeat=\"language in languages\">\\n' +\n    '                {{language.name}}\\n' +\n    '            </md-option>\\n' +\n    '        </md-select>\\n' +\n    '    </md-input-container>\\n' +\n    '\\n' +\n    '    <md-input-container class=\"md-block\"\\n' +\n    '                        ng-if=\"$party.type !=\\'team\\'\">\\n' +\n    '        <label>{{::\\'THEME\\' | translate}}</label>\\n' +\n    '        <md-select class=\"w-stretch theme-text-primary\"\\n' +\n    '                   ng-model=\"$user.theme\"\\n' +\n    '                   ng-change=\"onChangeUser()\"\\n' +\n    '                   ng-disabled=\"transaction.busy()\">\\n' +\n    '            <md-option ng-value=\"theme\"\\n' +\n    '                       ng-repeat=\"theme in themes\"\\n' +\n    '                       ng-selected=\"$theme == theme ? true : false\">\\n' +\n    '                {{ theme | translate }}\\n' +\n    '            </md-option>\\n' +\n    '        </md-select>\\n' +\n    '    </md-input-container>\\n' +\n    '    <pip-location-edit class=\"map-edit bm24-flex\"\\n' +\n    '                       ng-hide=\"$party.type ==\\'team\\'\"\\n' +\n    '                       pip-changed=\"onChangeBasicInfo()\"\\n' +\n    '                       pip-location-name=\"$party.loc_name\"\\n' +\n    '                       pip-location-pos=\"loc_pos\">\\n' +\n    '    </pip-location-edit>\\n' +\n    '</form>\\n' +\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('user_settings/user_settings_change_password.html',\n    '<md-dialog class=\"pip-dialog layout-column\"  width=\"440\">\\n' +\n    '    <form name=\"form\" ng-submit=\"onApply()\" >\\n' +\n    '    <div class=\"pip-header\">\\n' +\n    '        <h3 class=\"m0\">\\n' +\n    '            {{::\\'SETTINGS_CHANGE_PASSWORD_TITLE\\' | translate : module}}\\n' +\n    '        </h3>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"pip-body\">\\n' +\n    '        <div class=\"pip-content\">\\n' +\n    '            <div class=\"text-error bm8\"\\n' +\n    '                 ng-messages=\"form.$serverError\">\\n' +\n    '                <div ng-message=\"ERROR_UNKNOWN\">\\n' +\n    '                    {{ form.$serverError.ERROR_UNKNOWN | translate }}\\n' +\n    '                </div>\\n' +\n    '            </div>\\n' +\n    '\\n' +\n    '            <md-input-container class=\"md-block\">\\n' +\n    '                <label>{{::\\'SETTINGS_CHANGE_PASSWORD_CURRENT_PASSWORD\\' | translate }}</label>\\n' +\n    '                <input name=\"oldPassword\" type=\"password\"\\n' +\n    '                       ng-model=\"changePasData.old_password\"\\n' +\n    '                       ng-required=\"change_password.$submitted\"\\n' +\n    '                       pip-clear-errors/>\\n' +\n    '\\n' +\n    '                <div ng-messages=\"errorsWithHint(form, form.oldPassword)\">\\n' +\n    '                    <div ng-message=\"required\">\\n' +\n    '                        {{::\\'ERROR_REQUIRED\\' | translate }}\\n' +\n    '                    </div>\\n' +\n    '                    <div ng-message=\"ERROR_1107\">\\n' +\n    '                        {{::\\'ERROR_WRONG_PASSWORD\\' | translate }}\\n' +\n    '                    </div>\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '            </md-input-container>\\n' +\n    '\\n' +\n    '            <md-input-container class=\"md-block\">\\n' +\n    '                <label>{{\\'SETTINGS_CHANGE_PASSWORD_NEW_PASSWORD\\' | translate }}</label>\\n' +\n    '                <input name=\"newPassword\" type=\"password\"\\n' +\n    '                       ng-model=\"changePasData.new_password\"\\n' +\n    '                       ng-change=\"onCheckRepeatPassword()\"\\n' +\n    '                       ng-required=\"change_password.$submitted\"\\n' +\n    '                       ng-minlength=\"6\"\\n' +\n    '                       pip-clear-errors/>\\n' +\n    '                <div class=\"hint\"\\n' +\n    '                     ng-if=\"errorsWithHint(form, form.newPassword).hint\">\\n' +\n    '                    {{ \\'HINT_PASSWORD\\' | translate }}\\n' +\n    '                </div>\\n' +\n    '                <div ng-messages=\"errorsWithHint(form, form.newPassword)\">\\n' +\n    '                    <div ng-message=\"required\">\\n' +\n    '                        {{::\\'ERROR_REQUIRED\\' | translate}}\\n' +\n    '                    </div>\\n' +\n    '                    <div ng-message=\"minlength\">\\n' +\n    '                        {{::\\'HINT_PASSWORD\\' | translate }}\\n' +\n    '                    </div>\\n' +\n    '                    <div ng-message=\"ERROR_1105\">\\n' +\n    '                        {{::\\'ERROR_IDENTICAL_PASSWORDS\\' | translate }}\\n' +\n    '                    </div>\\n' +\n    '                </div>\\n' +\n    '            </md-input-container>\\n' +\n    '\\n' +\n    '            <md-input-container class=\"md-block\">\\n' +\n    '                <label>{{ \\'SETTINGS_CHANGE_PASSWORD_REPEAT_RASSWORD\\' | translate }}</label>\\n' +\n    '                <input name=\"repeat\"  type=\"password\"\\n' +\n    '                       ng-model=\"repeat\"\\n' +\n    '                       ng-change=\"onCheckRepeatPassword()\"\\n' +\n    '                       ng-required=\"change_password.$submitted\"\\n' +\n    '                       ng-minlength=\"6\" />\\n' +\n    '\\n' +\n    '                <div class=\"hint\"\\n' +\n    '                     ng-if=\"errorsRepeatWithHint(form.repeat).hint\">\\n' +\n    '                    {{::\\'HINT_REPEAT_PASSWORD\\' | translate }}\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '                <div ng-messages=\"errorsRepeatWithHint(form.repeat)\">\\n' +\n    '                    <div ng-message=\"required\">{{::\\'ERROR_REQUIRED\\' | translate }}</div>\\n' +\n    '                    <div ng-message=\"minlength\">{{::\\'HINT_PASSWORD\\' | translate }}</div>\\n' +\n    '                    <div ng-message=\"repeat\">{{::\\'REPEAT_PASSWORD_INVALID\\' | translate }}</div>\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '            </md-input-container>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"pip-footer\">\\n' +\n    '        <div>\\n' +\n    '            <md-button aria-label=\"xxx\"\\n' +\n    '                       ng-click=\"onCancel()\">\\n' +\n    '                {{::\\'CANCEL\\' | translate }}\\n' +\n    '            </md-button>\\n' +\n    '            <md-button type=\"submit\" class=\"md-accent\" aria-label=\"xxx\">\\n' +\n    '                {{::\\'APPLY\\' | translate : module}}\\n' +\n    '            </md-button>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '    </form>\\n' +\n    '</md-dialog>\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('user_settings/user_settings_sessions.html',\n    '\\n' +\n    '    <md-progress-linear ng-show=\"transaction.busy()\" md-mode=\"indeterminate\" class=\"pip-progress-top\">\\n' +\n    '    </md-progress-linear>\\n' +\n    '    <div class=\"pip-details-title pip-sessions\">\\n' +\n    '        <p class=\"pip-title bm16\">\\n' +\n    '            {{::\\'SETTINGS_ACTIVE_SESSIONS_TITLE\\' | translate}}\\n' +\n    '        </p>\\n' +\n    '\\n' +\n    '        <p class=\"pip-subtitle\">\\n' +\n    '            {{::\\'SETTINGS_ACTIVE_SESSIONS_SUBTITLE\\' | translate}}\\n' +\n    '        </p>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '\\n' +\n    '<md-list class=\"w-stretch\">\\n' +\n    '    <div ng-repeat=\"session in sessions\" >\\n' +\n    '        <div class=\"layout-row\"\\n' +\n    '             ng-init=\"showBlock = session.id != sessionId\"\\n' +\n    '             ng-click=\"showBlock = !showBlock\" >\\n' +\n    '            <p class=\"m0 text-subhead2 text-overflow max-w50-stretch\">\\n' +\n    '                {{::session.client}}\\n' +\n    '            </p>\\n' +\n    '            <p class=\"m0 lp4 text-body1 color-secondary-text flex\">\\n' +\n    '                {{::\\'SETTINGS_ACTIVE_SESSION_ACTIVE\\' | translate}}\\n' +\n    '            </p>\\n' +\n    '            <p class=\"m0 text-body1 color-secondary-text\">\\n' +\n    '                {{::country}}\\n' +\n    '                <md-icon ng-if=\"showBlock\" md-svg-icon=\"icons:triangle-up\"></md-icon>\\n' +\n    '                <md-icon ng-if=\"!showBlock\" md-svg-icon=\"icons:triangle-down\"></md-icon>\\n' +\n    '            </p>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"layout-row bm8 bp8\" ng-class=\"{\\'divider-bottom\\':!$last}\" >\\n' +\n    '            <div class=\"flex-50\">\\n' +\n    '                <p class=\"m0 bm4 text-body1 text-overflow color-secondary-text \">\\n' +\n    '                    {{session.last_req | date : \\'medium\\'}}\\n' +\n    '                </p>\\n' +\n    '                <p class=\"m0 bm4 text-body1 text-overflow color-secondary-text\"\\n' +\n    '                   ng-show=\"showBlock\">\\n' +\n    '                    {{::\\'SETTINGS_ACTIVE_SESSION_OS\\' | translate}}{{::session.platform}}</p>\\n' +\n    '                <p class=\"m0 bm4 text-body1 text-overflow color-secondary-text\"\\n' +\n    '                   ng-show=\"showBlock\">\\n' +\n    '                    {{::\\'SETTINGS_ACTIVE_SESSION_IP\\' | translate}}{{::session.address}}\\n' +\n    '                </p>\\n' +\n    '                <md-button class=\"md-raised\"\\n' +\n    '                           ng-show=\"showBlock && session.id != sessionId\"\\n' +\n    '                           ng-click=\"onRemove(session)\">\\n' +\n    '                    {{::\\'SETTINGS_ACTIVE_SESSIONS_CLOSE_SESSION\\' | translate}}\\n' +\n    '                </md-button>\\n' +\n    '            </div>\\n' +\n    '\\n' +\n    '            <pip-location-ip class=\"map-edit flex-50\" ng-if=\"showBlock\"\\n' +\n    '                             pip-ipaddress=\"session.address\"\\n' +\n    '                             pip-extra-info=\"country = extraInfo.country\">\\n' +\n    '            </pip-location-ip>\\n' +\n    '        </div>\\n' +\n    '\\n' +\n    '    </div>\\n' +\n    '</md-list>\\n' +\n    '<div class=\"layout-row layout-align-end-center\">\\n' +\n    '    <md-button class=\"md-raised\"\\n' +\n    '               ng-show=\"sessions.length > 1\"\\n' +\n    '               ng-click=\"onRemoveAll()\">\\n' +\n    '        {{::\\'SETTINGS_ACTIVE_SESSIONS_CLOSE_ACTIVE_SESSIONS\\' | translate}}\\n' +\n    '    </md-button>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipSettings.Templates');\n} catch (e) {\n  module = angular.module('pipSettings.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('user_settings/user_settings_verify_email.html',\n    '<md-dialog class=\"pip-dialog layout-column\"  width=\"440\">\\n' +\n    '    <div class=\"pip-body\">\\n' +\n    '        <div class=\"pip-content\">\\n' +\n    '                <md-progress-linear ng-show=\"transaction.busy()\" md-mode=\"indeterminate\" class=\"pip-progress-top\" >\\n' +\n    '                </md-progress-linear>\\n' +\n    '\\n' +\n    '                <h2>{{::\\'VERIFY_EMAIL_TITLE\\' | translate}}</h2>\\n' +\n    '\\n' +\n    '                <p class=\"title-padding\">{{::\\'VERIFY_EMAIL_TEXT_1\\' | translate}} </p>\\n' +\n    '\\n' +\n    '                <form name=\\'form\\' novalidate>\\n' +\n    '                    <div ng-messages=\"form.$serverError\" class=\"text-error bm8\">\\n' +\n    '                        <div ng-message=\"ERROR_UNKNOWN\">{{ form.$serverError.ERROR_UNKNOWN | translate }}</div>\\n' +\n    '                    </div>\\n' +\n    '\\n' +\n    '                    <md-input-container class=\"display  bp4 md-block\" >\\n' +\n    '                        <label>{{::\\'EMAIL\\' | translate}}</label>\\n' +\n    '                        <input name=\"email\" type=\"email\" ng-model=\"data.email\" required step=\"any\"\\n' +\n    '                               pip-clear-errors  tabindex=\"1\"\\n' +\n    '                               ng-disabled=\"transaction.busy()\"\\n' +\n    '                               pip-test=\"input-email\"/>\\n' +\n    '                        <div class=\"hint\" ng-if=\"errorsWithHint(form, form.email).hint\">{{::\\'HINT_EMAIL\\' | translate}}</div>\\n' +\n    '                        <div ng-messages=\"errorsWithHint(form, form.email)\"\\n' +\n    '                             xng-if=\"!form.email.$pristine\">\\n' +\n    '                            <div ng-message=\"required\">{{::\\'ERROR_EMAIL_INVALID\\' | translate }}</div>\\n' +\n    '                            <div ng-message=\"ERROR_1106\">{{::\\'ERROR_USER_NOT_FOUND\\' | translate}}</div>\\n' +\n    '                        </div>\\n' +\n    '                    </md-input-container>\\n' +\n    '\\n' +\n    '                    <md-input-container class=\"md-block\">\\n' +\n    '                        <label>{{::\\'ENTRY_VERIFICATION_CODE\\' | translate}}</label>\\n' +\n    '                        <input name=\"code\" ng-disabled=\"transaction.busy()\" tabindex=\"0\"\\n' +\n    '                               ng-model=\"data.code\" required pip-clear-errors/>\\n' +\n    '                        <div ng-messages=\"errorsWithHint(form, form.code)\">\\n' +\n    '                            <div ng-message=\"required\"> {{::\\'ERROR_CODE_INVALID\\' | translate }}</div>\\n' +\n    '                            <div ng-message=\"ERROR_1103\"> {{::\\'ERROR_CODE_WRONG\\' | translate }}</div>\\n' +\n    '                        </div>\\n' +\n    '                    </md-input-container>\\n' +\n    '\\n' +\n    '                    <p>\\n' +\n    '                        {{::\\'VERIFY_EMAIL_TEXT_21\\' | translate}}\\n' +\n    '                        <a ng-click=\"onRequestVerificationClick()\" class=\"pointer\" tabindex=\"0\">{{::\\'VERIFY_EMAIL_RESEND\\' | translate}}</a>\\n' +\n    '                        {{::\\'VERIFY_EMAIL_TEXT_22\\' | translate}}\\n' +\n    '                    </p>\\n' +\n    '                </form>\\n' +\n    '            </div>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"pip-footer\">\\n' +\n    '            <md-button ng-click=\"onCancel()\" ng-hide=\"transaction.busy()\" aria-label=\"xxx\">\\n' +\n    '                {{::\\'CANCEL\\' | translate}}\\n' +\n    '            </md-button>\\n' +\n    '            <md-button class=\"md-accent\" ng-click=\"onVerify()\" ng-hide=\"transaction.busy()\" tabindex=\"0\" aria-label=\"xxx\"\\n' +\n    '                ng-disabled=\"data.code.length == 0 || data.email.length == 0 || (!data.email && form.$pristine) || (!data.code)\">\\n' +\n    '                {{::\\'VERIFY\\' | translate}}\\n' +\n    '            </md-button>\\n' +\n    '            <md-button class=\"md-warn\" ng-show=\"transaction.busy()\" ng-click=\"transaction.abort()\" tabindex=\"0\" aria-label=\"xxx\">\\n' +\n    '                {{::\\'CANCEL\\' | translate}}\\n' +\n    '            </md-button>\\n' +\n    '\\n' +\n    '        </div>\\n' +\n    '</md-dialog>');\n}]);\n})();\n","/**\r\n * @file Registration of settings components\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('pipSettings', [\r\n        'pipSettings.Service',\r\n        'pipSettings.Page'\r\n    ]);\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Define controller for a settings tab\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular, _) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipSettings.Page', [\r\n        'pipState', 'pipSettings.Service', 'pipAppBar', 'pipSelected', 'pipTranslate',\r\n        'pipSettings.Templates'\r\n    ]);\r\n\r\n    thisModule.config(['pipAuthStateProvider', function (pipAuthStateProvider) {\r\n        pipAuthStateProvider.state('settings', {\r\n            url: '/settings?party_id',\r\n            auth: true,\r\n            controller: 'pipSettingsPageController',\r\n            templateUrl: 'settings_page/settings_page.html'\r\n        });\r\n    }]);\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name pipSettings.Page:pipSettingsPageController\r\n     *\r\n     * @description\r\n     * The controller is used for the whole settings tabs and provides\r\n     * navigation menu on the left and load content into right panel.\r\n     * This component is integrated with `'pipAppBar'` component and adapt the tabs header.\r\n     * The component has predefined states `'settings.base_info'` and `'settings.active_sessions'`. Each of these states\r\n     * require user's authorization.\r\n     *\r\n     * @requires pipAppBar\r\n     */\r\n    thisModule.controller('pipSettingsPageController',\r\n        ['$scope', '$state', '$rootScope', '$timeout', 'pipAppBar', 'pipSettings', function ($scope, $state, $rootScope, $timeout, pipAppBar, pipSettings) {\r\n\r\n            $scope.tabs = _.filter(pipSettings.getTabs(), function (tab) {\r\n                if (tab.visible === true && (tab.access ? tab.access($rootScope.$user, tab) : true)) {\r\n                    return tab;\r\n                }\r\n            });\r\n\r\n            $scope.tabs = _.sortBy($scope.tabs, 'index');\r\n\r\n            $scope.selected = {};\r\n            if ($state.current.name !== 'settings') {\r\n                initSelect($state.current.name);\r\n            }\r\n            if ($state.current.name === 'settings' && pipSettings.getDefaultTab()) {\r\n                initSelect(pipSettings.getDefaultTab().state);\r\n            } else {\r\n                $timeout(function () {\r\n                    if (pipSettings.getDefaultTab()) {\r\n                        initSelect(pipSettings.getDefaultTab().state);\r\n                    }\r\n                    if (!pipSettings.getDefaultTab() && $scope.tabs.length > 0) {\r\n                        initSelect($scope.tabs[0].state);\r\n                    }\r\n                });\r\n            }\r\n\r\n            appHeader();\r\n\r\n            /** @see onNavigationSelect */\r\n            $scope.onNavigationSelect = onNavigationSelect;\r\n            /** @see onDropdownSelect */\r\n            $scope.onDropdownSelect = onDropdownSelect;\r\n\r\n            /**\r\n             * Config header panel\r\n             */\r\n            function appHeader() {\r\n                pipAppBar.showMenuNavIcon();\r\n                pipAppBar.showTitleText('SETTINGS_TITLE');\r\n                pipAppBar.showLocalActions(null, []);\r\n                pipAppBar.showShadowSm();\r\n                pipAppBar.hideSearch();\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Page:pipSettingsPageController\r\n             * @name pipSettings.Page:pipSettingsPageController:onDropdownSelect\r\n             *\r\n             * @description\r\n             * Method changes selected tab in the navigation menu and transfer to selected tab(state).\r\n             * It used on mobile screens.\r\n             *\r\n             * @param {Object} state    State configuration object\r\n             */\r\n            function onDropdownSelect(state) {\r\n                onNavigationSelect(state.state);\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Page:pipSettingsPageController\r\n             * @name pipSettings.Page:pipSettingsPageController:onNavigationSelect\r\n             *\r\n             * @description\r\n             * Method changes selected tab in the navigation menu and transfer to selected tab(state).\r\n             * It uses on screens more than mobile.\r\n             *\r\n             * @param {string} state    Name of new state\r\n             */\r\n            function onNavigationSelect(state) {\r\n                initSelect(state);\r\n\r\n                if ($scope.selected.tab) {\r\n                    $state.go(state);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Establish selected tab\r\n             */\r\n            function initSelect(state) {\r\n                $scope.selected.tab = _.find($scope.tabs, function (tab) {\r\n                    return tab.state === state;\r\n                });\r\n                $scope.selected.tabIndex = _.indexOf($scope.tabs, $scope.selected.tab);\r\n                $scope.selected.tabId = state;\r\n            }\r\n        }]);\r\n\r\n})(window.angular, window._);\r\n","/**\r\n * @file Service for settings component\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular, _) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipSettings.Service', []);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name pipSettings.Service:pipSettingsProvider\r\n     *\r\n     * @description\r\n     * Service provides an interface to manage 'Settings' component behaviour.\r\n     * It is available on config and run phases.\r\n     */\r\n    thisModule.provider('pipSettings', ['pipAuthStateProvider', function (pipAuthStateProvider) {\r\n\r\n        var defaultTab,\r\n            tabs = [];\r\n\r\n        return {\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Service:pipSettingsProvider\r\n             * @name pipSettings.Service.pipSettingsProvider:addTab\r\n             *\r\n             * @description\r\n             * Register new tab in 'Settings' component. Before adding a tab this method validates passed object.\r\n             *\r\n             * @param {Object} tabObj  Configuration object for new tab.\r\n             */\r\n            addTab: addTab,\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Service:pipSettingsProvider\r\n             * @name pipSettings.Service.pipSettingsProvider:getTabs\r\n             *\r\n             * @description\r\n             * Method returns collection of registered tabs.\r\n             *\r\n             * @returns {Array<Object>} Collection of tabs.\r\n             */\r\n            getTabs: getTabs,\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Service:pipSettingsProvider\r\n             * @name pipSettings.Service.pipSettingsProvider:setDefaultTab\r\n             *\r\n             * @description\r\n             * Establish a tab which is available by default (after chose this component in menu).\r\n             *\r\n             * @param {string} name     Name of the default state for this component.\r\n             */\r\n            setDefaultTab: setDefaultTab,\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipSettings.Service:pipSettingsProvider\r\n             * @name pipSettings.Service.pipSettingsProvider:getDefaultTab\r\n             *\r\n             * @description\r\n             * Method returns an config object for tabs established as default (it will be opened when app transeferred to\r\n             * abstract state 'settings').\r\n             *\r\n             * @returns {Array<Object>} Collection of tabs.\r\n             */\r\n            getDefaultTab: getDefaultTab,\r\n\r\n            $get: function () {\r\n                /**\r\n                 * @ngdoc service\r\n                 * @name pipSettings.Service:pipSettings\r\n                 *\r\n                 * @description\r\n                 * Service provides an interface to manage 'Settings' component behaviour.\r\n                 * It is available on config and run phases.\r\n                 */\r\n                return {\r\n                    /**\r\n                     * @ngdoc method\r\n                     * @methodOf pipSettings.Service:pipSettings\r\n                     * @name pipSettings.Service.pipSettings:getTabs\r\n                     *\r\n                     * @description\r\n                     * Method returns collection of registered tabs.\r\n                     *\r\n                     * @returns {Array<Object>} Collection of tabs.\r\n                     */\r\n                    getTabs: getTabs,\r\n\r\n                    /**\r\n                     * @ngdoc method\r\n                     * @methodOf pipSettings.Service:pipSettings\r\n                     * @name pipSettings.Service.pipSettings:addTab\r\n                     *\r\n                     * @description\r\n                     * Register new tab in 'Settings' component. Before adding a tab this method validates passed object.\r\n                     *\r\n                     * @param {Object} tabObj  Configuration object for new tab.\r\n                     */\r\n                    addTab: addTab,\r\n\r\n                    /**\r\n                     * @ngdoc method\r\n                     * @methodOf pipSettings.Service:pipSettings\r\n                     * @name pipSettings.Service.pipSettings:getDefaultTab\r\n                     *\r\n                     * @description\r\n                     * Method returns an config object for tabs established as default (it will be opened when app transeferred to\r\n                     * abstract state 'settings').\r\n                     *\r\n                     * @returns {Array<Object>} Collection of tabs.\r\n                     */\r\n                    getDefaultTab: getDefaultTab,\r\n\r\n                    /**\r\n                     * @ngdoc method\r\n                     * @methodOf pipSettings.Service:pipSettings\r\n                     * @name pipSettings.Service.pipSettings:setDefaultTab\r\n                     *\r\n                     * @description\r\n                     * Establish a tab which is available by default (after chose this component in menu).\r\n                     *\r\n                     * @param {string} name     Name of the default state for this component.\r\n                     */\r\n                    setDefaultTab: setDefaultTab\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Appends component abstract state prefix to passed state\r\n         */\r\n        function getFullStateName(state) {\r\n            return 'settings.' + state;\r\n        }\r\n\r\n        function getTabs() {\r\n            return _.clone(tabs, true);\r\n        }\r\n\r\n        function getDefaultTab() {\r\n            var defaultTab;\r\n\r\n            defaultTab = _.find(tabs, function (p) {\r\n                return p.state === defaultTab;\r\n            });\r\n\r\n            return _.clone(defaultTab, true);\r\n        }\r\n\r\n        function addTab(tabObj) {\r\n            var existingTab;\r\n\r\n            validateTab(tabObj);\r\n            existingTab = _.find(tabs, function (p) {\r\n                return p.state === getFullStateName(tabObj.state);\r\n            });\r\n            if (existingTab) {\r\n                throw new Error('Tab with state name \"' + tabObj.state + '\" is already registered');\r\n            }\r\n\r\n            tabs.push({\r\n                state: getFullStateName(tabObj.state),\r\n                title: tabObj.title,\r\n                index: tabObj.index || 100000,\r\n                access: tabObj.access,\r\n                visible: tabObj.visible !== false,\r\n                stateConfig: _.clone(tabObj.stateConfig, true)\r\n            });\r\n\r\n            pipAuthStateProvider.state(getFullStateName(tabObj.state), tabObj.stateConfig);\r\n\r\n            // if we just added first state and no default state is specified\r\n            if (typeof defaultTab === 'undefined' && tabs.length === 1) {\r\n                setDefaultTab(tabObj.state);\r\n            }\r\n        }\r\n\r\n        function setDefaultTab(name) {\r\n            // TODO [apidhirnyi] extract expression inside 'if' into variable. It isn't readable now.\r\n            if (!_.find(tabs, function (tab) {\r\n                return tab.state === getFullStateName(name);\r\n            })) {\r\n                throw new Error('Tab with state name \"' + name + '\" is not registered');\r\n            }\r\n\r\n            defaultTab = getFullStateName(name);\r\n\r\n            pipAuthStateProvider.redirect('settings', getFullStateName(name));\r\n        }\r\n\r\n        /**\r\n         * Validates passed tab config object\r\n         * If passed tab is not valid it will throw an error\r\n         */\r\n        function validateTab(tabObj) {\r\n            if (!tabObj || !_.isObject(tabObj)) {\r\n                throw new Error('Invalid object');\r\n            }\r\n\r\n            if (tabObj.state === null || tabObj.state === '') {\r\n                throw new Error('Tab should have valid Angular UI router state name');\r\n            }\r\n\r\n            if (tabObj.access && !_.isFunction(tabObj.access)) {\r\n                throw new Error('\"access\" should be a function');\r\n            }\r\n\r\n            if (!tabObj.stateConfig || !_.isObject(tabObj.stateConfig)) {\r\n                throw new Error('Invalid state configuration object');\r\n            }\r\n        }\r\n    }]);\r\n\r\n})(window.angular, window._);\r\n","/**\r\n * @file Settings tab logic\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('pipUserSettings', [\r\n        'ngMaterial', 'pipData',\r\n        'pipSettings.Service',\r\n        'pipSettings.Page',\r\n\r\n        'pipUserSettings.Data',\r\n        'pipUserSettings.Strings',\r\n        'pipUserSettings.Sessions',\r\n        'pipUserSettings.BasicInfo',\r\n        'pipSettings.Templates'\r\n    ]);\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Settings basic info controller\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular, _) {\r\n    'use strict';\r\n    var thisModule = angular.module('pipUserSettings.BasicInfo',\r\n        ['pipUserSettings.ChangePassword', 'pipUserSettings.VerifyEmail', \r\n            'pipSettings.Service', 'pipSettings.Page',]);\r\n\r\n    thisModule.config(['pipSettingsProvider', function (pipSettingsProvider) {\r\n        pipSettingsProvider.addTab({\r\n            state: 'basic_info',\r\n            index: 1,\r\n            title: 'SETTINGS_BASIC_INFO_TITLE',\r\n            stateConfig: {\r\n                url: '/basic_info',\r\n                controller: 'pipUserSettingsBasicInfoController',\r\n                templateUrl: 'user_settings/user_settings_basic_info.html',\r\n                auth: true\r\n            }\r\n        });\r\n\r\n        pipSettingsProvider.setDefaultTab('basic_info');\r\n    }]);\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name pipUserSettings.BasicInfo:pipUserSettingsBasicInfoController\r\n     *\r\n     * @description\r\n     * Controller for the predefined 'basic_info' state.\r\n     * Provides sync changes user's profile with remote profile.\r\n     * On state exit everything is saved on the server.\r\n     */\r\n    thisModule.controller('pipUserSettingsBasicInfoController',\r\n        ['$scope', '$rootScope', '$mdDialog', '$state', '$window', '$timeout', '$mdTheming', 'pipTranslate', 'pipTransaction', 'pipTheme', 'pipToasts', 'pipUserSettingsTabData', 'pipFormErrors', function ($scope, $rootScope, $mdDialog, $state, $window, $timeout, $mdTheming,\r\n                  pipTranslate, pipTransaction, pipTheme,\r\n                  pipToasts, pipUserSettingsTabData, pipFormErrors) {\r\n\r\n            try {\r\n                $scope.originalParty = angular.toJson($rootScope.$party);\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n\r\n            $scope.nameCopy = $rootScope.$party.name;\r\n\r\n            $timeout(function () {\r\n                $scope.loc_pos = $rootScope.$party.loc_pos;\r\n            });\r\n\r\n            $scope.genders = pipTranslate.translateSet(['male', 'female', 'n/s']);\r\n            $scope.languages = pipTranslate.translateSet(['ru', 'en']);\r\n\r\n            $scope.transaction = pipTransaction('settings.basic_info', $scope);\r\n\r\n            $scope.themes = _.keys(_.omit($mdTheming.THEMES, 'default'));\r\n\r\n            $state.get('settings.basic_info').onExit = saveChanges;\r\n\r\n            $scope.errorsWithHint = pipFormErrors.errorsWithHint;\r\n            /** @see onChangePassword */\r\n            $scope.onChangePassword = onChangePassword;\r\n            /** @see onVerifyEmail */\r\n            $scope.onVerifyEmail = onVerifyEmail;\r\n            /** @see onPictureCreated */\r\n            $scope.onPictureCreated = onPictureCreated;\r\n            /** @see onPictureChanged */\r\n            $scope.onPictureChanged = onPictureChanged;\r\n            /** @see updateUser */\r\n            $scope.onChangeUser = _.debounce(updateUser, 2000);\r\n            /** @see saveChanges */\r\n            $scope.onChangeBasicInfo = _.debounce(saveChanges, 2000);\r\n\r\n            function onPictureChanged() {\r\n                $scope.picture.save(\r\n                    function () {\r\n                        $rootScope.$broadcast('pipPartyAvatarUpdated');\r\n                    },\r\n                    function (error) {\r\n                        return new Error(error);\r\n                    }\r\n                );\r\n            }\r\n\r\n            function onPictureCreated($event) {\r\n                $scope.picture = $event.sender;\r\n                $scope.picture.save(\r\n                    function () {\r\n                        $rootScope.$broadcast('pipPartyAvatarUpdated');\r\n                    },\r\n                    function (error) {\r\n                        return new Error(error);\r\n                    }\r\n                );\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.BasicInfo:pipUserSettingsBasicInfoController\r\n             * @name pipUserSettings.BasicInfo.pipUserSettingsBasicInfoController:onChangeBasicInfo\r\n             *\r\n             * @description\r\n             * Saves changes onto server.\r\n             * This method responses on change of the input information.\r\n             * It is updated user's party profile. Also it updates user's profile in $rootScope.\r\n             */\r\n            function saveChanges() {\r\n                if ($scope.form) {\r\n                    $scope.form.$setSubmitted();\r\n                }\r\n\r\n                if ($rootScope.$party) {\r\n\r\n                    if ($rootScope.$party.type === 'person' && $scope.form.$invalid) {\r\n                        return;\r\n                    }\r\n\r\n                    // Check to avoid unnecessary savings\r\n                    $rootScope.$party.loc_pos = $scope.loc_pos;\r\n                    try {\r\n                        var party = angular.toJson($rootScope.$party);\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n\r\n                    if (party !== $scope.originalParty) {\r\n                        pipUserSettingsTabData.updateParty($scope.transaction, $rootScope.$party,\r\n                            function (data) {\r\n                                $scope.originalParty = party;\r\n                                $scope.nameCopy = data.name;\r\n                            }, function (error) {\r\n                                $scope.message = String() + 'ERROR_' + error.status || error.data.status_code;\r\n                                $rootScope.$party = angular.fromJson($scope.originalParty);\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.BasicInfo:pipUserSettingsBasicInfoController\r\n             * @name pipUserSettings.BasicInfo.pipUserSettingsBasicInfoController:onChangeUser\r\n             *\r\n             * @description\r\n             * Saves changes onto server.\r\n             * This method responses on change of the user's profile information.\r\n             * Also it updates user's profile in $rootScope.\r\n             */\r\n            function updateUser() {\r\n\r\n                if ($rootScope.$user.id === $rootScope.$party.id) {\r\n                    pipUserSettingsTabData.updateUser($scope.transaction, $rootScope.$user,\r\n                        function (data) {\r\n                            pipTranslate.use(data.language);\r\n                            $rootScope.$user.language = data.language;\r\n                            $rootScope.$user.theme = data.theme;\r\n                            if ($rootScope.$user.theme) {\r\n                                pipTheme.setCurrentTheme($rootScope.$user.theme, true);\r\n                            }\r\n\r\n                        }, function (error) {\r\n                            var message;\r\n\r\n                            message = String() + 'ERROR_' + error.status || error.data.status_code;\r\n                            pipToasts.showNotification(pipTranslate.translate(message), null, null, null);\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.BasicInfo:pipUserSettingsBasicInfoController\r\n             * @name pipUserSettings.BasicInfo.pipUserSettingsBasicInfoController:onChangePassword\r\n             *\r\n             * @description\r\n             * It opens a dialog panel to change password.\r\n             *\r\n             * @param {Object} event    Triggered event object\r\n             */\r\n            function onChangePassword(event) {\r\n                var message;\r\n\r\n                $mdDialog.show({\r\n                    templateUrl: 'user_settings/user_settings_change_password.html',\r\n                    controller: 'pipUserSettingsChangePasswordController',\r\n                    targetEvent: event,\r\n                    locals: {email: $rootScope.$party.email}\r\n                }).then(\r\n                    function (answer) {\r\n                        if (answer) {\r\n                            message = String() + 'RESET_PWD_SUCCESS_TEXT';\r\n                            pipToasts.showNotification(pipTranslate.translate(message), null, null, null);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.BasicInfo:pipUserSettingsBasicInfoController\r\n             * @name pipUserSettings.BasicInfo.pipUserSettingsBasicInfoController:onVerifyEmail\r\n             *\r\n             * @description\r\n             * It opens a dialog panel to change password.\r\n             *\r\n             * @param {Object} event    Triggered event object\r\n             */\r\n            function onVerifyEmail(event) {\r\n                var message;\r\n\r\n                $mdDialog.show({\r\n                    templateUrl: 'user_settings/user_settings_verify_email.html',\r\n                    controller: 'pipUserSettingsVerifyEmailController',\r\n                    targetEvent: event,\r\n                    locals: {email: $rootScope.$party.email}\r\n                }).then(\r\n                    function (answer) {\r\n                        $scope.user.email_ver = answer;\r\n                        if (answer) {\r\n                            message = String() + 'VERIFY_EMAIL_SUCCESS_TEXT';\r\n                            pipToasts.showNotification(pipTranslate.translate(message), null, null, null);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }]\r\n    );\r\n\r\n})(window.angular, window._);\r\n","/**\r\n * @file Settings change password controller\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUserSettings.ChangePassword', []);\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name pipUserSettings.ChangePassword:pipUserSettingsChangePasswordController\r\n     *\r\n     * @description\r\n     * Controller for dialog panel of password change.\r\n     */\r\n    thisModule.controller('pipUserSettingsChangePasswordController',\r\n        ['$scope', '$rootScope', '$mdDialog', 'email', 'pipRest', 'pipTransaction', 'pipFormErrors', function ($scope, $rootScope, $mdDialog, email, pipRest, pipTransaction, pipFormErrors) {\r\n\r\n            $scope.transaction = pipTransaction('settings.change_password', $scope);\r\n            $scope.errorsRepeatWithHint = function (form, formPart) {\r\n                if ($scope.showRepeatHint) {\r\n                    return pipFormErrors.errorsWithHint(form, formPart);\r\n                }\r\n\r\n                return {};\r\n            };\r\n            $scope.showRepeatHint = true;\r\n            $scope.changePasData = {};\r\n\r\n            $scope.errorsWithHint = pipFormErrors.errorsWithHint;\r\n            $scope.onCancel = onCancel;\r\n            $scope.onCheckRepeatPassword = onCheckRepeatPassword;\r\n            $scope.onApply = onApply;\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.ChangePassword:pipUserSettingsChangePasswordController\r\n             * @name pipUserSettings.ChangePassword.pipUserSettingsChangePasswordController:onCancel\r\n             *\r\n             * @description\r\n             * Closes opened dialog panel.\r\n             */\r\n            function onCancel() {\r\n                $mdDialog.cancel();\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.ChangePassword:pipUserSettingsChangePasswordController\r\n             * @name pipUserSettings.ChangePassword.pipUserSettingsChangePasswordController:onCheckRepeatPassword\r\n             *\r\n             * @description\r\n             * Validates a password typed into password fields.\r\n             */\r\n            function onCheckRepeatPassword() {\r\n                if ($scope.changePasData) {\r\n                    if ($scope.repeat === $scope.changePasData.new_password || $scope.repeat === '' || !$scope.repeat) {\r\n                        $scope.form.repeat.$setValidity('repeat', true);\r\n                        if ($scope.repeat === $scope.changePasData.new_password) {\r\n                            $scope.showRepeatHint = false;\r\n                        } else {\r\n                            $scope.showRepeatHint = true;\r\n                        }\r\n                    } else {\r\n                        $scope.showRepeatHint = true;\r\n                        $scope.form.repeat.$setValidity('repeat', false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.ChangePassword:pipUserSettingsChangePasswordController\r\n             * @name pipUserSettings.ChangePassword.pipUserSettingsChangePasswordController:onApply\r\n             *\r\n             * @description\r\n             * Approves password change and sends request to the server on password change.\r\n             */\r\n            function onApply() {\r\n                $scope.onCheckRepeatPassword();\r\n\r\n                if ($scope.form.$invalid) {\r\n                    return;\r\n                }\r\n\r\n                if (!$scope.transaction.begin('CHANGE_PASSWORD')) {\r\n                    return;\r\n                }\r\n\r\n                $scope.changePasData.email = email;\r\n\r\n                pipRest.changePassword().call(\r\n                    $scope.changePasData,\r\n                    function () {\r\n                        $scope.transaction.end();\r\n                        $mdDialog.hide(true);\r\n                    },\r\n                    function (error) {\r\n                        $scope.transaction.end(error);\r\n                        pipFormErrors.setFormError(\r\n                            $scope.form, error,\r\n                            {\r\n                                1107: 'oldPassword',\r\n                                1105: 'newPassword'\r\n                            }\r\n                        );\r\n                    }\r\n                );\r\n            }\r\n        }]\r\n    );\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Settings data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUserSettings.Data', ['pipDataModel']);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n     *\r\n     * @description\r\n     * Service reproduces a data layer for settings component.\r\n     * The service provides an interface to interact with server.\r\n     *\r\n     * @requires pipDataModel\r\n     */\r\n    /**\r\n     * @ngdoc service\r\n     * @name pipUserSettings.Data:pipUserSettingsTabData\r\n     *\r\n     * @description\r\n     * Service reproduces a data layer for settings component.\r\n     * The service provides an interface to interact with server.\r\n     *\r\n     * @requires pipDataModel\r\n     */\r\n    thisModule.provider('pipUserSettingsTabData', function () {\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readContactsResolver\r\n         *\r\n         * @description\r\n         * Retrieve user's contacts from the server.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readContactsResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.getOwnContacts().get({\r\n                    party_id: pipRest.partyId($stateParams),\r\n                    session_id: pipRest.sessionId()\r\n                }).$promise;\r\n            }];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readBlocksResolver\r\n         *\r\n         * @description\r\n         * Retrieves blocks resolver from the server.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readBlocksResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.connectionBlocks().query({\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n            }];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readSessionsResolver\r\n         *\r\n         * @description\r\n         * Retrieves user's active sessions from the server.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readSessionsResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.userSessions().query({\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n            }];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readSessionsResolver\r\n         *\r\n         * @description\r\n         * Retrieves user's activities collection.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readActivitiesResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.partyActivities().tab({\r\n                    party_id: pipRest.partyId($stateParams),\r\n                    paging: 1,\r\n                    skip: 0,\r\n                    take: 25\r\n                }).$promise;\r\n            }];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readSettingsResolver\r\n         *\r\n         * @description\r\n         * Retrieves user's party settings object from the server.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readSettingsResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.partySettings().get({\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n            }];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf pipUserSettings.Data:pipUserSettingsTabDataProvider\r\n         * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:readSessionIdResolver\r\n         *\r\n         * @description\r\n         * Retrieves current user's active session id.\r\n         *\r\n         * @returns {promise} Request promise.\r\n         */\r\n        this.readSessionIdResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.sessionId();\r\n            }];\r\n\r\n        // CRUD operations and other business methods\r\n\r\n        this.$get = ['pipRest', '$stateParams', function (pipRest, $stateParams) {\r\n            return {\r\n                /**\r\n                 * @ngdoc property\r\n                 * @propertyOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:partyId\r\n                 *\r\n                 * @description\r\n                 * Contains user's party ID.\r\n                 */\r\n                partyId: pipRest.partyId,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:updateParty\r\n                 *\r\n                 * @description\r\n                 * Updates user's party configuration.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} party        New updating object\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                updateParty: function (transaction, party, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('UPDATING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.parties().update(\r\n                        party,\r\n                        function (updatedParty) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n\r\n                            if (successCallback) {\r\n                                successCallback(updatedParty);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:saveContacts\r\n                 *\r\n                 * @description\r\n                 * Saves user's contacts.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Array<Object>} contacts      New updating contacts collection\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                saveContacts: function (transaction, contacts, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('SAVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.contacts().save(\r\n                        contacts,\r\n                        function (savedContacts) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(savedContacts);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:updateContact\r\n                 *\r\n                 * @description\r\n                 * Updates a contact record.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} contact      Updating contant object\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                updateContact: function (transaction, contact, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('UPDATING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.contacts().update(\r\n                        contact,\r\n                        function (updatedContact) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(updatedContact);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:updateUser\r\n                 *\r\n                 * @description\r\n                 * Updates a user's profile.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} user         Updating user's profile\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                updateUser: function (transaction, user, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('UPDATING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n                    pipRest.users().update(\r\n                        user,\r\n                        function (updatedUser) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(updatedUser);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:removeBlock\r\n                 *\r\n                 * @description\r\n                 * Removes a block.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} block        Removing block object\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                removeBlock: function (transaction, block, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('REMOVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n                    pipRest.connectionBlocks().remove(\r\n                        block,\r\n                        function (removedBlock) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(removedBlock);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:removeBlock\r\n                 *\r\n                 * @description\r\n                 * Remove an session, passed through parameters.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} session      Removing block object\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                removeSession: function (transaction, session, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('REMOVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n                    pipRest.userSessions().remove(\r\n                        {\r\n                            id: session.id,\r\n                            party_id: pipRest.partyId($stateParams)\r\n                        },\r\n                        function (removedSession) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(removedSession);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:requestEmailVerification\r\n                 *\r\n                 * @description\r\n                 * Cancels process of email verification.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 */\r\n                requestEmailVerification: function (transaction) {\r\n                    var tid = transaction.begin('RequestEmailVerification');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.requestEmailVerification().get(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams)\r\n                        },\r\n                        function () {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                        }, function (error) {\r\n                            transaction.end(error);\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:verifyEmail\r\n                 *\r\n                 * @description\r\n                 * Verifies passed email.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} verifyData   Verified data\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                verifyEmail: function (transaction, verifyData, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('Verifying');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.verifyEmail().call(\r\n                        verifyData,\r\n                        function (verifyData) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n\r\n                            if (successCallback) {\r\n                                successCallback(verifyData);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:verifyEmail\r\n                 *\r\n                 * @description\r\n                 * Saves user's settings.\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} settings     Saves user's settings\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                saveSettings: function (transaction, settings, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('SAVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.partySettings().save(\r\n                        settings,\r\n                        function (savedSettings) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n\r\n                            if (successCallback) {\r\n                                successCallback(savedSettings);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:getPreviousActivities\r\n                 *\r\n                 * @description\r\n                 * Retrieves previous user's activities\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {number} start        Start position\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                getPreviousActivities: function (transaction, start, successCallback, errorCallback) {\r\n                    var tid = transaction.begin('SAVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.partyActivities().tab(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams),\r\n                            paging: 1,\r\n                            skip: start,\r\n                            take: 25\r\n                        },\r\n                        function (tabActivities) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n                            if (successCallback) {\r\n                                successCallback(tabActivities);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @methodOf pipUserSettings.Data:pipUserSettingsTabData\r\n                 * @name pipUserSettings.Data.pipUserSettingsTabDataProvider:getRefPreviousEventsActivities\r\n                 *\r\n                 * @description\r\n                 * Retrieves events for corresponded to pervious activities\r\n                 *\r\n                 * @param {Object} transaction  Service provides API to change application state\r\n                 * @param {Object} start        Start position\r\n                 * @param {string} refType      Name of needed entity\r\n                 * @param {Object} item         Entity object\r\n                 * @param {Function} successCallback    Function invokes when data is updated successfully\r\n                 * @param {Function} errorCallback      Function invokes when data is not updated\r\n                 */\r\n                getRefPreviousEventsActivities: function (transaction, start, refType, item,\r\n                                                          successCallback, errorCallback) {\r\n                    var tid = transaction.begin('SAVING');\r\n\r\n                    if (!tid) {\r\n                        return;\r\n                    }\r\n\r\n                    pipRest.partyActivities().tab(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams),\r\n                            paging: 1,\r\n                            skip: start,\r\n                            ref_type: refType,\r\n                            ref_id: item.id,\r\n                            take: 25\r\n                        },\r\n                        function (tabActivities) {\r\n                            if (transaction.aborted(tid)) {\r\n                                return;\r\n                            }\r\n                            transaction.end();\r\n\r\n                            if (successCallback) {\r\n                                successCallback(tabActivities);\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            transaction.end(error);\r\n                            if (errorCallback) {\r\n                                errorCallback(error);\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }];\r\n    });\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Settings sessions controller\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular, _, async) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUserSettings.Sessions', [\r\n        'pipSettings.Service', 'pipSettings.Page',]);\r\n\r\n    thisModule.config(['pipSettingsProvider', 'pipUserSettingsTabDataProvider', function (pipSettingsProvider, pipUserSettingsTabDataProvider) {\r\n        pipSettingsProvider.addTab({\r\n            state: 'sessions',\r\n            index: 3,\r\n            title: 'SETTINGS_ACTIVE_SESSIONS_TITLE',\r\n            stateConfig: {\r\n                url: '/sessions',\r\n                controller: 'pipUserSettingsSessionsController',\r\n                templateUrl: 'user_settings/user_settings_sessions.html',\r\n                auth: true,\r\n                resolve: {\r\n                    sessions: pipUserSettingsTabDataProvider.readSessionsResolver,\r\n                    sessionId: pipUserSettingsTabDataProvider.readSessionIdResolver\r\n                }\r\n            }\r\n        });\r\n    }]);\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name pipUserSettings.Sessions:pipUserSettingsSessionsController\r\n     *\r\n     * @description\r\n     * Controller provides an interface for managing active sessions.\r\n     */\r\n    thisModule.controller('pipUserSettingsSessionsController',\r\n        ['$scope', 'pipTransaction', 'pipUserSettingsTabData', 'sessions', 'sessionId', function ($scope, pipTransaction, pipUserSettingsTabData, sessions, sessionId) {\r\n\r\n            $scope.sessionId = sessionId;\r\n            $scope.transaction = pipTransaction('settings.sessions', $scope);\r\n            $scope.sessions = sessions;\r\n\r\n            $scope.onRemoveAll = onRemoveAll;\r\n            $scope.onRemove = onRemove;\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.Sessions:pipUserSettingsSessionsController\r\n             * @name pipUserSettings.Sessions.pipUserSettingsSessionsController:onRemoveAll\r\n             *\r\n             * @description\r\n             * Closes all active session.\r\n             */\r\n            function onRemoveAll() {\r\n                async.each($scope.sessions, function (session) {\r\n                    if (session.id !== $scope.sessionId) {\r\n                        $scope.onRemove(session);\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.Sessions:pipUserSettingsSessionsController\r\n             * @name pipUserSettings.Sessions.pipUserSettingsSessionsController:onRemove\r\n             *\r\n             * @description\r\n             * Closes passed session.\r\n             *\r\n             * @param {Object} session  Session configuration object\r\n             */\r\n            function onRemove(session) {\r\n                if (session.id === $scope.sessionId) {\r\n                    return;\r\n                }\r\n\r\n                pipUserSettingsTabData.removeSession($scope.transaction, session,\r\n                    function () {\r\n                        $scope.sessions = _.without($scope.sessions, session);\r\n                    },\r\n                    function (error) {\r\n                        $scope.message = 'ERROR_' + error.status || error.data.status_code;\r\n                    }\r\n                );\r\n            }\r\n        }]\r\n    );\r\n\r\n})(window.angular, window._, window.async);\r\n","/**\r\n * @file Settings string resources\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* eslint-disable quote-props */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUserSettings.Strings', ['pipTranslate']);\r\n\r\n    thisModule.config(['pipTranslateProvider', function (pipTranslateProvider) {\r\n\r\n        // Set translation strings for the module\r\n        pipTranslateProvider.translations('en', {\r\n            'SETTINGS_TITLE': 'Settings',\r\n            'SETTINGS_BASIC_INFO_TITLE': 'Basic info',\r\n            'SETTINGS_ACTIVE_SESSIONS_TITLE': 'Active sessions',\r\n\r\n            'SETTINGS_BASIC_INFO_FULL_NAME': 'Full name',\r\n            'SETTINGS_BASIC_INFO_VERIFY_HINT': 'Please, verify your email address.',\r\n            'SETTINGS_BASIC_INFO_VERIFY_CODE': 'Verify email address',\r\n            'SETTINGS_BASIC_INFO_DATE_CHANGE_PASSWORD': 'Your password was changed on ',\r\n            'SETTINGS_BASIC_INFO_CHANGE_PASSWORD': 'Change your password',\r\n            'SETTINGS_BASIC_INFO_NAME_HINT': 'Please, use your real name to let other people know who you are.',\r\n            'SETTINGS_BASIC_INFO_WORDS_ABOUT_ME': 'Few words about yourself',\r\n\r\n            'SETTINGS_BASIC_INFO_GENDER': 'Gender',\r\n            'SETTINGS_BASIC_INFO_BIRTHDAY': 'Birthday',\r\n            'SETTINGS_BASIC_INFO_LOCATION': 'Current location',\r\n            'SETTINGS_BASIC_INFO_PRIMARY_EMAIL': 'Primary email',\r\n            'SETTINGS_BASIC_INFO_FROM': 'User since ',\r\n            'SETTINGS_BASIC_INFO_USER_ID': 'User ID',\r\n\r\n            'SETTINGS_CHANGE_PASSWORD_TITLE': 'Change password',\r\n            'SETTINGS_CHANGE_PASSWORD_NEW_PASSWORD': 'New password',\r\n            'SETTINGS_CHANGE_PASSWORD_REPEAT_RASSWORD': 'Repeat password',\r\n            'SETTINGS_CHANGE_PASSWORD_CURRENT_PASSWORD': 'Current password',\r\n\r\n            'SETTINGS_ACTIVE_SESSIONS_SUBTITLE': ' If you notice any unfamiliar devices or locations, click' +\r\n            '\"Close Session\" to end the session.',\r\n            'SETTINGS_ACTIVE_SESSIONS_CLOSE_SESSION': 'Close session',\r\n            'SETTINGS_ACTIVE_SESSIONS_CLOSE_ACTIVE_SESSIONS': 'Close active sessions',\r\n            'SETTINGS_ACTIVE_SESSION_OS': 'OS: ',\r\n            'SETTINGS_ACTIVE_SESSION_IP': 'IP: ',\r\n            'SETTINGS_ACTIVE_SESSION_ACTIVE': 'active',\r\n\r\n            'SETTINGS_BLACKLIST_TITLE': 'Blacklist',\r\n            'SETTINGS_BLACKLIST_SUBTITLE': 'Parties from blacklist will not be able to send you invitations and ' +\r\n            'private messages.',\r\n            'SETTINGS_BLACKLIST_UNBLOCK': 'Unblock',\r\n            'SETTINGS_BLACKLIST_EMPTY': 'You have no blocked parties',\r\n\r\n            'SETTINGS_CONTACT_INFO_TITLE': 'Contact info',\r\n            'SETTINGS_CONTACT_INFO_EMAIL': 'Email',\r\n            'SETTINGS_CONTACT_INFO_ADD_EMAIL': 'Add email',\r\n            'SETTINGS_CONTACT_INFO_ADD_PHONE': 'Add phone',\r\n            'SETTINGS_CONTACT_INFO_ADD_ADDRESS': 'Add address',\r\n            'SETTINGS_CONTACT_INFO_ADD_ACCOUNT': 'Add account',\r\n            'SETTINGS_CONTACT_INFO_ADD_URL': 'Add URL',\r\n            'SETTINGS_CONTACT_INFO_ADDRESS': 'Address',\r\n            'SETTINGS_CONTACT_INFO_PHONE': 'Phone',\r\n            'SETTINGS_CONTACT_INFO_ACCOUNT_NAME': 'Account name',\r\n            'SETTINGS_CONTACT_INFO_URL': 'URL',\r\n\r\n            'THEME': 'Theme',\r\n\r\n            'HINT_PASSWORD': 'Minimum 6 characters',\r\n            'HINT_REPEAT_PASSWORD': 'Repeat password',\r\n\r\n            'ERROR_WRONG_PASSWORD': 'Wrong password',\r\n            'ERROR_IDENTICAL_PASSWORDS': 'Old and new passwords are identical',\r\n            'REPEAT_PASSWORD_INVALID': 'Password does not match',\r\n            'ERROR_EMAIL_INVALID': 'Please, enter a valid email'\r\n        });\r\n\r\n        pipTranslateProvider.translations('ru', {\r\n            'SETTINGS_TITLE': 'Настройки',\r\n            'SETTINGS_BASIC_INFO_TITLE': 'Основные данные',\r\n            'SETTINGS_ACTIVE_SESSIONS_TITLE': 'Активные сессии',\r\n\r\n            'SETTINGS_BASIC_INFO_FULL_NAME': 'Полное имя',\r\n            'SETTINGS_BASIC_INFO_NAME_HINT': 'Пожалуйста, используйте реальное имя, чтоб люди могли вас узнать',\r\n            'SETTINGS_BASIC_INFO_VERIFY_HINT': 'Пожалуйста, подтвердите адрес своей электронной почты',\r\n            'SETTINGS_BASIC_INFO_VERIFY_CODE': 'Подтвердите адрес эл.почты',\r\n            'SETTINGS_BASIC_INFO_DATE_CHANGE_PASSWORD': 'Ваш пароль был изменен ',\r\n            'SETTINGS_BASIC_INFO_CHANGE_PASSWORD': 'Поменять пароль',\r\n\r\n            'SETTINGS_BASIC_INFO_WORDS_ABOUT_ME': 'Несколько слов о себе',\r\n            'SETTINGS_BASIC_INFO_GENDER': 'Пол',\r\n            'SETTINGS_BASIC_INFO_BIRTHDAY': 'Дата рождения',\r\n            'SETTINGS_BASIC_INFO_LOCATION': 'Текущее местонахождение',\r\n            'SETTINGS_BASIC_INFO_PRIMARY_EMAIL': 'Основной адрес эл. почты',\r\n            'SETTINGS_BASIC_INFO_FROM': 'Начиная с',\r\n            'SETTINGS_BASIC_INFO_USER_ID': 'Личный код',\r\n\r\n            'SETTINGS_CHANGE_PASSWORD_TITLE': 'Изменить пароль',\r\n            'SETTINGS_CHANGE_PASSWORD_NEW_PASSWORD': 'Новый пароль',\r\n            'SETTINGS_CHANGE_PASSWORD_REPEAT_RASSWORD': 'Повтор',\r\n            'SETTINGS_CHANGE_PASSWORD_CURRENT_PASSWORD': 'Текущий пароль',\r\n\r\n            'SETTINGS_ACTIVE_SESSIONS_SUBTITLE': 'Если вы заметили какие-либо незнакомые устройства или ' +\r\n            'месторасположение, нажмите кнопку \"Закончить сеанс\", чтобы завершить сеанс.',\r\n            'SETTINGS_ACTIVE_SESSIONS_CLOSE_SESSION': 'Закрыть сессию',\r\n            'SETTINGS_ACTIVE_SESSIONS_CLOSE_ACTIVE_SESSIONS': 'Закрыть активные сессии',\r\n            'SETTINGS_ACTIVE_SESSION_OS': 'ОС: ',\r\n            'SETTINGS_ACTIVE_SESSION_IP': 'IP: ',\r\n            'SETTINGS_ACTIVE_SESSION_ACTIVE': 'Активно',\r\n\r\n            'SETTINGS_BLACKLIST_TITLE': 'Блокировки',\r\n            'SETTINGS_BLACKLIST_SUBTITLE': 'Участники из черного списка не смогут' +\r\n            ' посылать вам приглашения и личные сообщения.',\r\n            'SETTINGS_BLACKLIST_UNBLOCK': 'Разблокировать',\r\n            'SETTINGS_BLACKLIST_EMPTY': 'У вас нет заблокированных участников',\r\n\r\n            'SETTINGS_CONTACT_INFO_TITLE': 'Контакты',\r\n            'SETTINGS_CONTACT_INFO_EMAIL': 'Адрес электронной почты',\r\n            'SETTINGS_CONTACT_INFO_ADD_EMAIL': 'Добавить адрес эл. почты',\r\n            'SETTINGS_CONTACT_INFO_ADD_PHONE': 'Добавить телефон',\r\n            'SETTINGS_CONTACT_INFO_ADD_ADDRESS': 'Добавить адрес',\r\n            'SETTINGS_CONTACT_INFO_ADD_ACCOUNT': 'Добавить аккаунт',\r\n            'SETTINGS_CONTACT_INFO_ADD_URL': 'Добавить веб-сайт',\r\n            'SETTINGS_CONTACT_INFO_ADDRESS': 'Адрес',\r\n            'SETTINGS_CONTACT_INFO_PHONE': 'Телефон',\r\n            'SETTINGS_CONTACT_INFO_ACCOUNT_NAME': 'Учетка в мессенджере',\r\n            'SETTINGS_CONTACT_INFO_URL': 'Веб сайт',\r\n\r\n            'THEME': 'Тема',\r\n\r\n            'HINT_PASSWORD': 'Минимум 6 знаков',\r\n            'HINT_REPEAT_PASSWORD': 'Повторите пароль',\r\n\r\n            'ERROR_WRONG_PASSWORD': 'Неправильный пароль',\r\n            'ERROR_IDENTICAL_PASSWORDS': 'Старый и новый пароли идентичны',\r\n            'REPEAT_PASSWORD_INVALID': 'Пароль не совпадает',\r\n            'ERROR_EMAIL_INVALID': 'Пожалуйста, введите правильный почт.адрес'\r\n        });\r\n    }]);\r\n\r\n})(window.angular);\r\n","/**\r\n * @file Settings verify email controller\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUserSettings.VerifyEmail', []);\r\n\r\n    /**\r\n     * @ngdoc controller\r\n     * @name pipUserSettings.VerifyEmail:pipUserSettingsVerifyEmailController\r\n     *\r\n     * @description\r\n     * Controller for verify email dialog panel.\r\n     */\r\n    thisModule.controller('pipUserSettingsVerifyEmailController',\r\n        ['$scope', '$rootScope', '$mdDialog', 'pipTransaction', 'pipFormErrors', 'pipUserSettingsTabData', 'email', function ($scope, $rootScope, $mdDialog, pipTransaction, pipFormErrors, pipUserSettingsTabData, email) {\r\n\r\n            $scope.emailVerified = false;\r\n            $scope.data = {\r\n                email: email,\r\n                code: ''\r\n            };\r\n            $scope.transaction = pipTransaction('settings.verify_email', $scope);\r\n\r\n            /** @see onAbort */\r\n            $scope.onAbort = onAbort;\r\n            /** @see onRequestVerificationClick*/\r\n            $scope.onRequestVerificationClick = onRequestVerificationClick;\r\n            $scope.errorsWithHint = pipFormErrors.errorsWithHint;\r\n            /** @see onVerify */\r\n            $scope.onVerify = onVerify;\r\n            /** @see onCancel */\r\n            $scope.onCancel = onCancel;\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.VerifyEmail:pipUserSettingsVerifyEmailController\r\n             * @name pipUserSettings.VerifyEmail.pipUserSettingsVerifyEmailController:onAbort\r\n             *\r\n             * @description\r\n             * Aborts a verify request.\r\n             */\r\n            function onAbort() {\r\n                $scope.transaction.abort();\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.VerifyEmail:pipUserSettingsVerifyEmailController\r\n             * @name pipUserSettings.VerifyEmail.pipUserSettingsVerifyEmailController:onCancel\r\n             *\r\n             * @description\r\n             * Closes opened dialog panel.\r\n             */\r\n            function onCancel() {\r\n                $mdDialog.cancel();\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.VerifyEmail:pipUserSettingsVerifyEmailController\r\n             * @name pipUserSettings.VerifyEmail.pipUserSettingsVerifyEmailController:onRequestVerificationClick\r\n             *\r\n             * @description\r\n             * Sends request to verify entered email.\r\n             */\r\n            function onRequestVerificationClick() {\r\n                pipUserSettingsTabData.requestEmailVerification($scope.transaction);\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @methodOf pipUserSettings.VerifyEmail:pipUserSettingsVerifyEmailController\r\n             * @name pipUserSettings.VerifyEmail.pipUserSettingsVerifyEmailController:onVerify\r\n             *\r\n             * @description\r\n             * Initiates request on verify email on the server.\r\n             */\r\n            function onVerify() {\r\n                $scope.form.$setSubmitted();\r\n\r\n                if ($scope.form.$invalid) {\r\n                    return;\r\n                }\r\n\r\n                pipUserSettingsTabData.verifyEmail(\r\n                    $scope.transaction,\r\n                    $scope.data,\r\n                    function () {\r\n                        $mdDialog.hide(true);\r\n                    },\r\n                    function (error) {\r\n                        pipFormErrors.setFormError(\r\n                            $scope.form, error,\r\n                            {\r\n                                1106: 'email',\r\n                                1103: 'code'\r\n                            }\r\n                        );\r\n\r\n                    }\r\n                );\r\n            }\r\n        }]\r\n    );\r\n\r\n})(window.angular);\r\n"],"sourceRoot":"/source/"}